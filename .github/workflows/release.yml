name: 🚀 Release Pipeline (Local-Only Mode)

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'  # Still support manual version tags
  pull_request:
    types: [closed]
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: false
        default: ''
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
      force_release:
        description: 'Force release even if no changes'
        required: false
        default: false
        type: boolean

# Required permissions for creating releases
permissions:
  contents: write        # Needed to create releases and upload assets
  pull-requests: read    # Needed to read PR information
  actions: read          # Needed to read workflow information
  packages: write        # Optional: for package publishing
  id-token: write        # Optional: for OIDC token if using AWS

env:
  GODOT_VERSION: 4.4.1
  EXPORT_NAME: Children_of_Singularity

jobs:
  # Generate version and check if release is needed
  version-check:
    name: 🏷️ Version Check
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.check.outputs.is_prerelease }}
    steps:
      - name: 📥 Checkout Source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Check Release Conditions
        id: check
        run: |
          echo "🔍 Checking if release should be triggered..."

          SHOULD_RELEASE="false"
          IS_PRERELEASE="false"

          # Manual workflow dispatch
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ github.event.inputs.force_release }}" = "true" ] || [ -n "${{ github.event.inputs.version }}" ]; then
              SHOULD_RELEASE="true"
              echo "✅ Manual release triggered"
            fi
          fi

          # Tag push - always trigger release
          if [ "${{ github.event_name }}" = "push" ]; then
            case "${{ github.ref }}" in
              refs/tags/v*)
                SHOULD_RELEASE="true"
                echo "✅ Tag-based release triggered"
                ;;
              refs/heads/main|refs/heads/master)
                SHOULD_RELEASE="true"
                IS_PRERELEASE="true"
                echo "✅ Push to main/master branch - triggering release"
                ;;
            esac
          fi

          # PR merge to main/master - always trigger release
          if [ "${{ github.event_name }}" = "pull_request" ] && [ "${{ github.event.action }}" = "closed" ] && [ "${{ github.event.pull_request.merged }}" = "true" ]; then
            if [ "${{ github.event.pull_request.base.ref }}" = "main" ] || [ "${{ github.event.pull_request.base.ref }}" = "master" ]; then
              SHOULD_RELEASE="true"
              IS_PRERELEASE="true"
              echo "✅ PR merged to main/master - triggering release"
            else
              echo "ℹ️ PR merged to non-main branch - skipping release"
            fi
          fi

          echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT

      - name: 🏷️ Generate Version
        id: version
        run: |
          echo "🏷️ Generating version number..."

          # Use manual version if provided
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "📋 Using manual version: $VERSION"
          else
            case "${{ github.ref }}" in
              refs/tags/v*)
                # Use tag version
                VERSION="${{ github.ref_name }}"
                echo "📋 Using tag version: $VERSION"
                ;;
              *)
                # Generate automatic version
            BRANCH_NAME="${{ github.ref_name }}"
            BUILD_NUMBER="${{ github.run_number }}"
            COMMIT_SHORT="${{ github.sha }}"
            COMMIT_SHORT=$(echo "$COMMIT_SHORT" | cut -c1-8)
            TIMESTAMP=$(date +%Y%m%d)

            # Get latest tag for base version
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            echo "📋 Latest tag: $LATEST_TAG"

            # Extract version numbers using portable method
            VERSION_NUMBERS=$(echo "$LATEST_TAG" | sed 's/^v//' | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' || echo "")
            if [ -n "$VERSION_NUMBERS" ]; then
              MAJOR=$(echo "$VERSION_NUMBERS" | cut -d. -f1)
              MINOR=$(echo "$VERSION_NUMBERS" | cut -d. -f2)
              PATCH=$(echo "$VERSION_NUMBERS" | cut -d. -f3)
            else
              MAJOR=0
              MINOR=1
              PATCH=0
            fi

            # Auto-increment based on branch
            if [ "$BRANCH_NAME" = "main" ] || [ "$BRANCH_NAME" = "master" ]; then
              # Increment patch for main branch
              PATCH=$((PATCH + 1))
              VERSION="v${MAJOR}.${MINOR}.${PATCH}-build.${BUILD_NUMBER}"
            else
              # Use current version with build suffix for other branches
              VERSION="v${MAJOR}.${MINOR}.${PATCH}-${BRANCH_NAME}.${BUILD_NUMBER}"
            fi

            echo "📋 Generated version: $VERSION"
                ;;
            esac
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📋 Final version: $VERSION"

  # Build the game for all platforms
  build-game:
    name: 🎮 Build Game
    runs-on: ubuntu-latest
    needs: version-check
    if: needs.version-check.outputs.should_release == 'true'
    steps:
      - name: 📥 Checkout Source
        uses: actions/checkout@v4

      - name: 🔧 Setup AWS CLI
        if: ${{ vars.USE_S3_STORAGE == 'true' }}
        run: |
          echo "🔧 Setting up AWS CLI on GitHub runner..."

          # Check if AWS CLI is already installed
          if command -v aws &> /dev/null; then
            echo "✅ AWS CLI already installed: $(aws --version)"
          else
            echo "📦 Installing AWS CLI..."
            sudo apt-get update -qq
            sudo apt-get install -y curl unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -q awscliv2.zip
            sudo ./aws/install --update

            # Verify installation
            aws --version
            echo "✅ AWS CLI installed successfully"
          fi

      - name: ⚙️ Configure AWS Credentials
        if: ${{ vars.USE_S3_STORAGE == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-west-2' }}

      - name: 🎮 Setup Godot
        uses: chickensoft-games/setup-godot@v1
        with:
          version: 4.4.1
          use-dotnet: false
          include-templates: true

      - name: 🔍 Verify Export Templates
        run: |
          echo "🔍 Verifying Godot export templates are properly installed..."

          # Check Godot installation
          godot --version || exit 1
          echo "✅ Godot is installed and accessible"

          # Verify export templates by attempting a dry-run export check
          echo "🔍 Testing export configuration..."

          # Check if project file is valid
          if ! godot --headless --check --quit --path . ; then
            echo "❌ Project validation failed"
            exit 1
          fi
          echo "✅ Project validation passed"

          # Test export presets exist and are accessible
          if [ -f "export_presets.cfg" ]; then
            echo "✅ Export presets configuration found"
            echo "📋 Export presets summary:"
            grep -E "^name=" export_presets.cfg | sed 's/name=/  - /'
          else
            echo "❌ export_presets.cfg not found"
            exit 1
          fi

          # Verify we can access export templates (templates should be installed by chickensoft action)
          echo "🔍 Checking export template availability..."
          # The chickensoft-games/setup-godot action should handle template installation
          # We'll verify by checking if we can at least validate the export configuration

          echo "✅ Export template verification complete"

      - name: ☁️ Download Assets from S3
        run: |
          echo "☁️ Downloading game assets from S3..."
          if [ "${{ vars.USE_S3_STORAGE }}" = "true" ]; then
            echo "📦 S3 storage enabled, downloading assets..."

            # Check if S3 manager script exists
            if [ -f "./scripts/s3-manager.sh" ]; then
              chmod +x ./scripts/s3-manager.sh

              # Download assets from S3
              echo "⬇️ Downloading assets from S3..."
              ./scripts/s3-manager.sh download-assets latest-assets/ assets/

              echo "✅ Assets downloaded from S3"
              echo "📋 Asset directory contents:"
              ls -la assets/ || echo "Assets directory not found"
            else
              echo "⚠️ S3 manager script not found, continuing without S3 assets"
            fi
          else
            echo "📦 S3 storage disabled, using local assets"
            echo "📋 Current asset directory:"
            ls -la assets/ || echo "Assets directory not found"
          fi

      - name: 📋 Setup Build Environment
        run: |
          echo "🔧 Setting up build environment..."
          echo "Version: ${{ needs.version-check.outputs.version }}"
          echo "Build Number: ${{ github.run_number }}"
          echo "Commit: ${{ github.sha }}"
          echo "✅ Godot and export templates configured by setup-godot action"

      - name: 🔧 Configure Production Build
        run: |
          echo "🔧 Configuring production build environment..."

          # Create production environment files from secrets/variables
          if [ -n "${{ secrets.API_GATEWAY_ENDPOINT }}" ]; then
            echo "API_GATEWAY_ENDPOINT=${{ secrets.API_GATEWAY_ENDPOINT }}" > trading.env
            echo "TRADING_TIMEOUT=15" >> trading.env
            echo "TRADING_DEBUG=false" >> trading.env
            echo "TRADING_MAX_RETRIES=3" >> trading.env
            echo "✅ Created production trading.env"
          else
            echo "⚠️ API_GATEWAY_ENDPOINT not configured in secrets, using template"
            cp trading.env.template trading.env || echo "❌ trading.env.template not found"
          fi

          if [ -n "${{ secrets.WEBSOCKET_URL }}" ]; then
            echo "WEBSOCKET_URL=${{ secrets.WEBSOCKET_URL }}" > lobby.env
            echo "LOBBY_CONNECTION_TIMEOUT=10" >> lobby.env
            echo "LOBBY_BROADCAST_INTERVAL=0.2" >> lobby.env
            echo "LOBBY_DEBUG_LOGS=false" >> lobby.env
            echo "LOBBY_MAX_RETRIES=3" >> lobby.env
            echo "✅ Created production lobby.env"
          else
            echo "⚠️ WEBSOCKET_URL not configured in secrets, using template"
            cp lobby.env.template lobby.env || echo "❌ lobby.env.template not found"
          fi

          # Apply build configuration if script exists
          if [ -f "build_config.sh" ]; then
            chmod +x build_config.sh
            echo "🔧 Applying production build configuration..."
            ./build_config.sh production inject
            echo "✅ Production configuration applied"
          else
            echo "⚠️ build_config.sh not found, skipping build configuration injection"
          fi

      - name: 🖥️ Build for Windows
        run: |
          echo "🖥️ Building for Windows..."
          mkdir -v -p build/windows
          godot --headless --verbose --export-release "Windows Desktop" build/windows/$EXPORT_NAME.exe

      - name: 🍎 Build for macOS
        run: |
          echo "🍎 Building for macOS..."
          mkdir -v -p build/macos
          godot --headless --verbose --export-release "macOS" build/macos/$EXPORT_NAME.zip

      - name: 🐧 Build for Linux
        run: |
          echo "🐧 Building for Linux..."
          mkdir -v -p build/linux
          godot --headless --verbose --export-release "Linux/X11" build/linux/$EXPORT_NAME.x86_64

      - name: 📁 Copy Additional Files
        run: |
          echo "📁 Copying additional files..."
          for platform in windows macos linux; do
            if [ -d "build/$platform" ]; then
              cp README.md build/$platform/ 2>/dev/null || echo "⚠️ README.md not found"
              cp LICENSE build/$platform/ 2>/dev/null || echo "⚠️ LICENSE not found"
            fi
          done

      - name: 📦 Create Release Archives
        run: |
          echo "📦 Creating release archives..."
          cd build

          # Get version from tag or input
          VERSION="${{ needs.version-check.outputs.version }}"
          echo "📋 Version: $VERSION"

          # Windows - ZIP archive
          if [ -d "windows" ]; then
            echo "📦 Creating Windows archive..."
            cd windows
            zip -r "../${EXPORT_NAME}_${VERSION}_Windows.zip" .
            cd ..
          fi

          # macOS - ZIP archive
          if [ -d "macos" ]; then
            echo "📦 Creating macOS archive..."
            cd macos
            zip -r "../${EXPORT_NAME}_${VERSION}_macOS.zip" .
            cd ..
          fi

          # Linux - TAR.GZ archive
          if [ -d "linux" ]; then
            echo "📦 Creating Linux archive..."
            cd linux
            tar -czf "../${EXPORT_NAME}_${VERSION}_Linux.tar.gz" .
            cd ..
          fi

          echo "📋 Archive contents:"
          ls -la *.zip *.tar.gz 2>/dev/null || echo "No archives found"

      - name: 📝 Generate Release Notes
        run: |
          echo "📝 Generating release notes..."
          VERSION="${{ needs.version-check.outputs.version }}"
          BUILD_NUMBER="${{ github.run_number }}"
          COMMIT_HASH="${{ github.sha }}"
          COMMIT_SHORT=$(echo "$COMMIT_HASH" | cut -c1-8)

          cat > build/RELEASE_NOTES.md << EOF
          # Children of the Singularity - Release $VERSION

          **Build Information:**
          - Version: $VERSION
          - Build Number: $BUILD_NUMBER
          - Commit: $COMMIT_SHORT
          - Build Date: $(date)

          ## Platform Downloads

          | Platform | Download | Notes |
          |----------|----------|--------|
          | Windows | ${EXPORT_NAME}_${VERSION}_Windows.zip | Windows 10+ (64-bit) |
          | macOS | ${EXPORT_NAME}_${VERSION}_macOS.zip | macOS 10.15+ (Universal) |
          | Linux | ${EXPORT_NAME}_${VERSION}_Linux.tar.gz | Linux (64-bit) |

          ## Installation

          ### Windows
          1. Download and extract the Windows zip file
          2. Run \`${EXPORT_NAME}.exe\`

          ### macOS
          1. Download and extract the macOS zip file
          2. Run \`${EXPORT_NAME}.app\`
          3. If blocked by security, right-click and select "Open"

          ### Linux
          1. Download and extract the Linux tar.gz file
          2. Make executable: \`chmod +x ${EXPORT_NAME}.x86_64\`
          3. Run: \`./${EXPORT_NAME}.x86_64\`

          ## Game Features

          - **3D Space Exploration**: Navigate through procedurally populated space zones
          - **Debris Collection**: Collect valuable space debris and artifacts
          - **Space Station Trading**: Interact with modular space stations
          - **Resource Management**: Manage collected resources and ship upgrades
          - **Dynamic Environment**: Real-time debris spawning and despawning system

          ## System Requirements

          - **Minimum**:
            - OS: Windows 10 / macOS 10.15 / Ubuntu 18.04
            - CPU: 2 GHz dual-core processor
            - Memory: 4 GB RAM
            - Graphics: Integrated graphics or dedicated GPU
            - Storage: 500 MB available space

          - **Recommended**:
            - OS: Windows 11 / macOS 12+ / Ubuntu 20.04+
            - CPU: 3 GHz quad-core processor
            - Memory: 8 GB RAM
            - Graphics: Dedicated GPU with 2GB VRAM
            - Storage: 1 GB available space

          ## Controls

          - **WASD** / **Arrow Keys**: Move ship
          - **Mouse**: Camera control
          - **Space**: Collect debris (when near)
          - **Escape**: Pause/Menu

          ## Known Issues

          - Export templates required for building from source
          - Some debris may occasionally flicker during collection

          ## Support

          For issues or feedback, please visit our GitHub repository.

          ---

          *Built with Godot $GODOT_VERSION*
          EOF

      - name: ☁️ Upload to S3 (if configured)
        if: ${{ vars.USE_S3_STORAGE == 'true' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION || 'us-west-2' }}
          S3_BUCKET_NAME: ${{ vars.S3_BUCKET_NAME || 'children-of-singularity-releases' }}
          BUILD_NUMBER: ${{ github.run_number }}
          COMMIT_HASH: ${{ github.sha }}
        run: |
          # Ensure AWS CLI is available (should already be installed from earlier step)
          if ! command -v aws &> /dev/null; then
            echo "🔧 Installing AWS CLI..."
            sudo apt-get update -qq
            sudo apt-get install -y curl unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -q awscliv2.zip
            sudo ./aws/install --update
            aws --version
          else
            echo "✅ AWS CLI already available: $(aws --version)"
          fi

          # Verify we're in the correct project directory
          echo "🔍 Verifying project structure..."
          echo "Current directory: $(pwd)"

          # Check for project.godot to ensure we're in the right place
          if [ ! -f "project.godot" ]; then
            echo "❌ project.godot not found - not in project root directory"
            echo "Directory contents:"
            ls -la
            exit 1
          fi
          echo "✅ Confirmed project root directory"

          # Verify scripts directory exists
          if [ ! -d "scripts" ]; then
            echo "❌ Scripts directory not found"
            echo "Available directories:"
            ls -la | grep "^d"
            exit 1
          fi
          echo "✅ Scripts directory found"

          # Check if S3 manager exists and verify its executability
          if [ -f "scripts/s3-manager.sh" ]; then
            echo "✅ Found s3-manager.sh, making executable..."
            chmod +x scripts/s3-manager.sh

            # Verify the script is actually executable and has basic functionality
            if ./scripts/s3-manager.sh check &>/dev/null; then
              echo "✅ S3 manager script is functional"
            else
              echo "⚠️ S3 manager script exists but may have issues (continuing anyway)"
            fi
          else
            echo "❌ s3-manager.sh not found in scripts directory"
            echo "🔍 Available files in scripts/:"
            ls -la scripts/ || echo "Scripts directory is empty or inaccessible"
            exit 1
          fi

          # Setup S3 bucket (will skip if exists)
          ./scripts/s3-manager.sh setup

          # Get version from tag or input
          VERSION="${{ needs.version-check.outputs.version }}"

          # Upload release to S3
          echo "📤 Uploading release $VERSION to S3..."
          if ./scripts/s3-manager.sh upload-release "$VERSION" "build/"; then
            echo "✅ Release uploaded to S3 successfully"

            # Generate download URLs and save to file
            echo "🔗 Generating download URLs..."
            ./scripts/s3-manager.sh get-urls "$VERSION" 604800 > build/s3-download-urls.txt

            echo "📋 S3 Release Information:"
            ./scripts/s3-manager.sh list-releases "$VERSION"
          else
            echo "❌ Failed to upload to S3"
            exit 1
          fi

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-builds
          path: build/
          retention-days: 1

      - name: 🧹 Cleanup Build Configuration
        if: always()  # Run even if previous steps failed
        run: |
          echo "🧹 Cleaning up build configuration..."

          # Restore original configuration files if they were modified
          if [ -f "build_config.sh" ]; then
            echo "🔄 Restoring original configuration files..."
            chmod +x build_config.sh
            ./build_config.sh production restore || echo "⚠️ Could not restore configuration (may not have been modified)"
          fi

          # Clean up any temporary environment files created during build
          if [ -f "trading.env" ] && [ -f "trading.env.template" ]; then
            # Only remove if it appears to be auto-generated (same as template)
            if cmp -s "trading.env" "trading.env.template"; then
              rm -f trading.env
              echo "🗑️ Removed auto-generated trading.env"
            fi
          fi

          if [ -f "lobby.env" ] && [ -f "lobby.env.template" ]; then
            # Only remove if it appears to be auto-generated (same as template)
            if cmp -s "lobby.env" "lobby.env.template"; then
              rm -f lobby.env
              echo "🗑️ Removed auto-generated lobby.env"
            fi
          fi

          echo "✅ Build cleanup completed"

  # Create GitHub Release
  create-release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    needs: [version-check, build-game]
    if: needs.version-check.outputs.should_release == 'true'
    steps:
      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-builds
          path: build/

      - name: 📋 List Build Contents
        run: |
          echo "📋 Build contents:"
          find build/ -type f -name "*.zip" -o -name "*.tar.gz" -o -name "RELEASE_NOTES.md" | sort

      - name: 🏷️ Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.version-check.outputs.version }}
          name: "Children of the Singularity ${{ needs.version-check.outputs.version }}"
          body_path: build/RELEASE_NOTES.md
          draft: false
          prerelease: ${{ needs.version-check.outputs.is_prerelease == 'true' }}
          files: |
            build/*.zip
            build/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ☁️ S3 Release Summary (if configured)
        if: ${{ vars.USE_S3_STORAGE == 'true' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION || 'us-west-2' }}
          S3_BUCKET_NAME: ${{ vars.S3_BUCKET_NAME || 'children-of-singularity-releases' }}
        run: |
          # Ensure AWS CLI is available
          if ! command -v aws &> /dev/null; then
            echo "🔧 Installing AWS CLI..."
            sudo apt-get update -qq
            sudo apt-get install -y curl unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -q awscliv2.zip
            sudo ./aws/install --update
            aws --version
          else
            echo "✅ AWS CLI already available: $(aws --version)"
          fi

          VERSION="${{ needs.version-check.outputs.version }}"

          echo "☁️ S3 Release Summary:"
          echo "📋 Version: $VERSION"
          echo "🪣 Bucket: $S3_BUCKET_NAME"
          echo "🌍 Region: $AWS_REGION"
          echo ""

          # Show S3 release information
          if [ -f "scripts/s3-manager.sh" ]; then
            chmod +x scripts/s3-manager.sh
          else
            echo "❌ s3-manager.sh not found, skipping S3 operations"
          fi

          if [ -f "scripts/s3-manager.sh" ] && ./scripts/s3-manager.sh check; then
            echo "📊 S3 Storage Information:"
            ./scripts/s3-manager.sh storage-info

            echo ""
            echo "🔗 Download URLs (valid for 7 days):"
            ./scripts/s3-manager.sh get-urls "$VERSION" 604800
          else
            echo "⚠️ Could not connect to S3"
          fi

      - name: 🎉 Release Summary
        run: |
          echo "🎉 Release pipeline completed successfully!"
          echo "📋 Release: ${{ needs.version-check.outputs.version }}"
          echo "🔗 Check the releases page for download links"

          if [ "${{ vars.USE_S3_STORAGE }}" = "true" ]; then
            echo "☁️ S3 storage also available with extended retention"
            echo "🪣 S3 Bucket: ${{ vars.S3_BUCKET_NAME || 'children-of-singularity-releases' }}"
          fi
