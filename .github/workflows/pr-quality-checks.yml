name: PR Quality Checks (Local-Only Mode)

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  godot-validation:
    name: Godot Project Validation
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: üîß Setup AWS CLI
      if: ${{ vars.USE_S3_STORAGE == 'true' }}
      run: |
        echo "üîß Setting up AWS CLI on GitHub runner..."

        # Check if AWS CLI is already installed
        if command -v aws &> /dev/null; then
          echo "‚úÖ AWS CLI already installed: $(aws --version)"
        else
          echo "üì¶ Installing AWS CLI..."
          sudo apt-get update -qq
          sudo apt-get install -y curl unzip
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install --update

          # Verify installation
          aws --version
          echo "‚úÖ AWS CLI installed successfully"
        fi

    - name: ‚öôÔ∏è Configure AWS Credentials
      if: ${{ vars.USE_S3_STORAGE == 'true' }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'us-west-2' }}

    - name: ‚òÅÔ∏è Download Assets from S3
      run: |
        echo "‚òÅÔ∏è Downloading game assets from S3 for validation..."
        if [ "${{ vars.USE_S3_STORAGE }}" = "true" ]; then
          echo "üì¶ S3 storage enabled, downloading assets..."

          # Check if S3 manager script exists
          if [ -f "./scripts/s3-manager.sh" ]; then
            chmod +x ./scripts/s3-manager.sh

            # Download assets from S3
            echo "‚¨áÔ∏è Downloading assets from S3..."
            ./scripts/s3-manager.sh download-assets latest-assets/ assets/

            echo "‚úÖ Assets downloaded from S3"
          else
            echo "‚ö†Ô∏è S3 manager script not found, continuing without S3 assets"
          fi
        else
          echo "üì¶ S3 storage disabled, using local assets"
        fi

    - name: Setup Godot
      uses: chickensoft-games/setup-godot@v1
      with:
        version: 4.4.1
        use-dotnet: false
        include-templates: true

    - name: Validate Godot Project
      run: |
        echo "üéÆ Validating Godot project structure and scripts..."
        echo "Working directory: $(pwd)"
        echo "Project file exists: $(ls -la project.godot)"
        echo "Project file size: $(wc -c project.godot)"
        echo "Project file first 10 lines:"
        head -10 project.godot
        echo "Project file last 10 lines:"
        tail -10 project.godot
        echo "Checking project file validity..."
        if [ $(wc -c < project.godot) -lt 1000 ]; then
          echo "‚ùå Project file appears to be truncated or corrupted (< 1000 bytes)"
          echo "This usually indicates the file is tracked by Git LFS without proper CI setup"
          echo "Full project file contents:"
          cat project.godot
          exit 1
        fi
        godot --headless --check --quit --path .

    - name: Check GDScript Syntax
      run: |
        echo "üìù Checking GDScript files for syntax errors..."
        echo "Found GDScript files:"
        find . -name "*.gd" -type f | wc -l
        find . -name "*.gd" -type f
        echo "Validating GDScript files with project context..."
        # Use project-level validation which checks all scripts in context
        godot --headless --check --quit --path .

  aws-trading-validation:
    name: AWS Trading Components
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Validate AWS Trading Lambda
      run: |
        echo "‚òÅÔ∏è Validating AWS Trading Lambda..."

        # Check if trading lambda exists
        if [ -f "backend/trading_lambda.py" ]; then
          echo "‚úÖ AWS trading lambda file exists"

          # Basic Python syntax check
          python3 -m py_compile backend/trading_lambda.py
          echo "‚úÖ Trading lambda syntax is correct"
        else
          echo "‚ùå AWS trading lambda file missing"
          exit 1
        fi

    - name: Check Trading Configuration
      run: |
        echo "üîß Checking trading configuration files..."

        # Check Godot trading scripts
        required_trading_files=("scripts/TradingMarketplace.gd" "scripts/TradingConfig.gd")
        for file in "${required_trading_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ Trading file exists: $file"
          else
            echo "‚ùå Missing trading file: $file"
            exit 1
          fi
        done

    - name: Validate Trading Schema
      run: |
        echo "üóÑÔ∏è Validating trading database schema..."
        if [ -f "data/postgres/trading_schema.sql" ]; then
          echo "‚úÖ Trading schema file exists"

          # Check for required tables
          if grep -q "listings" data/postgres/trading_schema.sql; then
            echo "‚úÖ Trading schema contains listings table"
          else
            echo "‚ùå Trading schema missing listings table"
            exit 1
          fi
        else
          echo "‚ùå Trading schema file missing"
          exit 1
        fi

  local-data-validation:
    name: Local Data System Validation
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Validate Local Data Components
      run: |
        echo "üíæ Validating local data system..."

        # Check LocalPlayerData.gd exists and has required methods
        if [ -f "scripts/LocalPlayerData.gd" ]; then
          echo "‚úÖ LocalPlayerData.gd exists"

          # Check for essential methods
          required_methods=("get_credits" "save_credits" "save_upgrades" "load_data_from_files")
          for method in "${required_methods[@]}"; do
            if grep -q "func $method" scripts/LocalPlayerData.gd; then
              echo "‚úÖ LocalPlayerData has $method method"
            else
              echo "‚ö†Ô∏è LocalPlayerData missing $method method"
            fi
          done
        else
          echo "‚ùå LocalPlayerData.gd missing"
          exit 1
        fi

    - name: Validate APIClient Local Mode
      run: |
        echo "üîß Validating APIClient local-only configuration..."

        if [ -f "scripts/APIClient.gd" ]; then
          echo "‚úÖ APIClient.gd exists"

          # Check for local-only configuration
          if grep -q "Local-only API client" scripts/APIClient.gd; then
            echo "‚úÖ APIClient is configured for local-only mode"
          else
            echo "‚ö†Ô∏è APIClient may not be properly configured for local-only mode"
          fi
        else
          echo "‚ùå APIClient.gd missing"
          exit 1
        fi

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check for TODO/FIXME comments
      run: |
        echo "üìã Checking for TODO/FIXME comments..."
        TODO_COUNT=$(grep -r "TODO\|FIXME\|XXX\|BUG\|HACK" --include="*.gd" --include="*.py" . | wc -l)
        echo "Found $TODO_COUNT TODO/FIXME comments"

        if [ $TODO_COUNT -gt 1000 ]; then
          echo "‚ö†Ô∏è  Warning: High number of TODO comments ($TODO_COUNT)"
        else
          echo "‚úÖ TODO comment count is acceptable ($TODO_COUNT)"
        fi

    - name: Check file structure
      run: |
        echo "üìÅ Validating project structure..."

        # Check required directories
        required_dirs=("scripts" "scenes" "backend" "assets" "data/postgres" "logs" "memory_bank")
        for dir in "${required_dirs[@]}"; do
          if [ -d "$dir" ]; then
            echo "‚úÖ Directory exists: $dir"
          else
            echo "‚ùå Missing directory: $dir"
            exit 1
          fi
        done

        # Check required files (updated for local-only)
        required_files=("project.godot" "backend/trading_lambda.py" "README.md" "scripts/LocalPlayerData.gd" "scripts/APIClient.gd")
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ File exists: $file"
          else
            echo "‚ùå Missing file: $file"
            exit 1
          fi
        done

    - name: Check naming conventions
      run: |
        echo "üìù Checking naming conventions..."

        # Check GDScript files use snake_case
        echo "Checking GDScript file naming..."
        find scripts -name "*.gd" -type f | while read file; do
          basename=$(basename "$file" .gd)
          if [[ "$basename" =~ ^[a-z_][a-z0-9_]*$ ]]; then
            echo "‚úÖ Good naming: $file"
          else
            echo "‚ö†Ô∏è  Consider snake_case for: $file"
          fi
        done

    - name: Trading Schema Validation
      run: |
        echo "üóÑÔ∏è  Validating trading database schema..."
        if [ -f "data/postgres/trading_schema.sql" ]; then
          echo "‚úÖ Trading schema file exists"

          # Basic SQL syntax check
          if grep -q "CREATE TABLE" data/postgres/trading_schema.sql; then
            echo "‚úÖ Schema contains table definitions"
          else
            echo "‚ùå Schema missing table definitions"
            exit 1
          fi

          if grep -q "listings" data/postgres/trading_schema.sql; then
            echo "‚úÖ Schema contains trading tables"
          else
            echo "‚ö†Ô∏è  Consider adding trading table definitions"
          fi
        else
          echo "‚ùå Trading schema file missing"
          exit 1
        fi

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check for sensitive data
      run: |
        echo "üîí Scanning for sensitive data..."

        # Check for potential secrets
        if grep -r "password\|secret\|key\|token" --include="*.py" --include="*.gd" --exclude-dir=".git" . | grep -v "TODO\|FIXME\|password_change\|secret_key\|api_key"; then
          echo "‚ö†Ô∏è  Potential sensitive data found - please review"
        else
          echo "‚úÖ No obvious sensitive data found"
        fi

        # Check for hardcoded URLs/IPs
        if grep -r "http://\|https://\|[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+" --include="*.py" --include="*.gd" . | grep -v "localhost\|127.0.0.1\|0.0.0.0\|example.com\|github.com"; then
          echo "‚ö†Ô∏è  Hardcoded URLs/IPs found - consider using environment variables"
        else
          echo "‚úÖ No hardcoded URLs/IPs found"
        fi

  gitleaks-scan:
    name: Gitleaks Secret Detection
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for gitleaks

    - name: Setup Gitleaks
      run: |
        echo "üîç Setting up Gitleaks..."
        # Download and install gitleaks
        wget -O gitleaks.tar.gz https://github.com/gitleaks/gitleaks/releases/download/v8.27.2/gitleaks_8.27.2_linux_x64.tar.gz
        tar -xzf gitleaks.tar.gz
        chmod +x gitleaks
        sudo mv gitleaks /usr/local/bin/
        echo "‚úÖ Gitleaks installed successfully"

    - name: Verify Gitleaks Configuration
      run: |
        echo "‚öôÔ∏è Verifying Gitleaks configuration..."
        if [ -f ".gitleaks.toml" ]; then
          echo "‚úÖ Gitleaks configuration file found"
          echo "üìÑ Configuration preview:"
          head -20 .gitleaks.toml
        else
          echo "‚ùå Gitleaks configuration file missing"
          exit 1
        fi

    - name: Run Gitleaks Secret Detection
      run: |
        echo "üîí Running Gitleaks secret detection..."
        echo "Scanning repository for secrets and credentials..."

        # Run gitleaks detect on all files
        gitleaks detect --config .gitleaks.toml --verbose --report-format json --report-path gitleaks-report.json

        # Check if any secrets were found
        if [ -f "gitleaks-report.json" ]; then
          secret_count=$(jq length gitleaks-report.json)
          if [ "$secret_count" -gt 0 ]; then
            echo "‚ùå $secret_count secrets detected!"
            echo "üîç Secrets found:"
            jq '.[] | {file: .File, line: .StartLine, rule: .RuleID, description: .Description}' gitleaks-report.json
            exit 1
          else
            echo "‚úÖ No secrets detected in repository"
          fi
        else
          echo "‚úÖ No secrets detected in repository"
        fi

    - name: Upload Gitleaks Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: gitleaks-report
        path: gitleaks-report.json
        retention-days: 7

  performance-check:
    name: Performance Analysis
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check file sizes
      run: |
        echo "üìä Checking file sizes..."

        # Check for large files (exclude venv directory)
        find . -name "*.py" -o -name "*.gd" -o -name "*.sql" | grep -v "/venv/" | while read file; do
          size=$(wc -l < "$file")
          if [ $size -gt 500 ]; then
            echo "‚ö†Ô∏è  Large file: $file ($size lines)"
          elif [ $size -gt 1000 ]; then
            echo "‚ùå Very large file: $file ($size lines) - consider splitting"
          else
            echo "‚úÖ Good size: $file ($size lines)"
          fi
        done

    - name: Check for performance anti-patterns
      run: |
        echo "üöÄ Checking for performance anti-patterns..."

        # Check for print statements in GDScript (we use print for logging in our implementation)
        if grep -r "print(" --include="*.gd" .; then
          echo "‚úÖ Found print statements in GDScript (used for logging)"
        else
          echo "‚úÖ No print statements found in GDScript"
        fi

  documentation-check:
    name: Documentation Quality
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check documentation completeness
      run: |
        echo "üìö Checking documentation..."

        # Check README exists and has content
        if [ -f "README.md" ] && [ -s "README.md" ]; then
          echo "‚úÖ README.md exists and has content"
        else
          echo "‚ùå README.md missing or empty"
          exit 1
        fi

        # Check memory bank documentation
        memory_bank_files=("memory_bank_projectbrief.md" "memory_bank_activeContext.md" "memory_bank_progress.md")
        for file in "${memory_bank_files[@]}"; do
          if [ -f "memory_bank/$file" ]; then
            echo "‚úÖ Memory bank file exists: $file"
          else
            echo "‚ùå Missing memory bank file: $file"
            exit 1
          fi
        done

    - name: Check inline documentation
      run: |
        echo "üìñ Checking inline documentation..."

        # Check for function documentation in GDScript
        gd_files=$(find scripts -name "*.gd" -type f | wc -l)
        documented_functions=$(grep -r "func.*:" --include="*.gd" scripts | wc -l)

        echo "GDScript files: $gd_files"
        echo "Documented functions: $documented_functions"

        if [ $documented_functions -gt 0 ]; then
          echo "‚úÖ Functions are documented in GDScript"
        else
          echo "‚ö†Ô∏è  Consider adding more function documentation"
        fi

  final-integration:
    name: Final Integration Test
    runs-on: ubuntu-latest
    needs: [godot-validation, aws-trading-validation, local-data-validation, code-quality, security-scan, gitleaks-scan, performance-check, documentation-check]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Setup Godot
      uses: chickensoft-games/setup-godot@v1
      with:
        version: 4.4.1
        use-dotnet: false
        include-templates: true

    - name: Local-Only Integration Test
      run: |
        echo "üéØ Running local-only integration test..."

        # Test Godot project loads correctly
        echo "üéÆ Testing Godot project loading..."
        godot --headless --check --quit --path .

        # Test AWS trading lambda syntax
        echo "‚òÅÔ∏è Testing AWS trading lambda..."
        python3 -m py_compile backend/trading_lambda.py

        # Test local data system is accessible
        echo "üíæ Testing local data system..."
        if [ -f "scripts/LocalPlayerData.gd" ] && [ -f "scripts/APIClient.gd" ]; then
          echo "‚úÖ Local data system components found"
        else
          echo "‚ùå Local data system components missing"
          exit 1
        fi

        # Test export capability
        echo "üèóÔ∏è Testing export build capability..."
        if [ -f "export_presets.cfg" ]; then
          echo "‚úÖ Export presets available"
        else
          echo "‚ùå Export presets missing"
          exit 1
        fi

        echo "‚úÖ Local-only integration test passed!"

    - name: Quality Gate Summary
      run: |
        echo "üèÜ Quality Gate Summary (Local-Only Mode):"
        echo "‚úÖ Godot project validation passed"
        echo "‚úÖ AWS trading components passed"
        echo "‚úÖ Local data system passed"
        echo "‚úÖ Code quality analysis passed"
        echo "‚úÖ Security scan passed"
        echo "‚úÖ Gitleaks secret detection passed"
        echo "‚úÖ Performance check passed"
        echo "‚úÖ Documentation check passed"
        echo "‚úÖ Local-only integration test passed"
        echo ""
        echo "üéâ All quality checks passed! Local-only PR is ready for review."
        echo ""
        echo "üéÆ Local-Only Mode Features:"
        echo "  ‚úÖ No backend dependencies required"
        echo "  ‚úÖ All data stored locally via LocalPlayerData.gd"
        echo "  ‚úÖ AWS trading marketplace available (when configured)"
        echo "  ‚úÖ Complete offline functionality"
